import { assert, expect } from 'chai';

import {
  DecodedFunctionCall,
  decodeInputParts,
} from '../../../lib/lookso/utils/decode-input-parts';
import { clearDB } from '../../helpers/database-helper';
import { insertMethodInterface } from '../../../lib/db/queries/method-interface.table';
import { insertMethodParameter } from '../../../lib/db/queries/method-parameter.table';
import { insertContract } from '../../../lib/db/queries/contract.table';
import { web3 } from '../../../lib/web3';

export const DecodeInputPartsTests = () => {
  const RAW_INPUT =
    '0x902d5fa00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000007e60000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004178fe71934d531476f56699066184630033129e6c4ac3f9475c6e1c50f1a5ff87495f1e40bf0b50726504b3353311ea678abbdcd5ee5dcc96e97ab05fa967a6731b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016444c028fe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e557cbf347eef6575d04e412a052933f3bd84df80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4af255b61000000000000000000000000e905eacee9b020c8d024f25fcad60df0ed195064756e646566696e656400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
  const RAW_INPUT2 =
    '0x902d5fa00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000007e60000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000041b24fdc3c51608c6ba9d9569aeaf2aa3cbad1df330a6f937118cf9213524719a773e1bf77db40122f87977db098af517ea3168db1d827c25ca1ac1f7f01085d2f1b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020444c028fe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e557cbf347eef6575d04e412a052933f3bd84df800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000014414a6e2930000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000019a26b4060ae7f7d5e3cd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000596f357c6a3a3e5e92a279d40e0f23f02901e9cf814326815bad2224dd00b113a8048120ad697066733a2f2f516d54584c434c544c41577564557377784472376e7a5865477a76416f77415934346d6f6252383661687a593470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
  const EXPECTED_OUTPUT: DecodedFunctionCall[] = [
    {
      contract: {
        address: '0x42d6fE6eb3Fc1E5585Ab958Fb77780327991781B',
      },
      methodInterface: {
        id: '0x902d5fa0',
        name: 'executeRelayCall',
      },
      decodedParameters: [
        {
          name: 'signature',
          type: 'bytes',
          value:
            '0x78fe71934d531476f56699066184630033129e6c4ac3f9475c6e1c50f1a5ff87495f1e40bf0b50726504b3353311ea678abbdcd5ee5dcc96e97ab05fa967a6731b',
        },
        {
          name: 'nonce',
          type: 'uint256',
          value: '688050945914137573122943456227035323564041',
        },
        {
          name: 'payload',
          type: 'bytes',
          value:
            '0x44c028fe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e557cbf347eef6575d04e412a052933f3bd84df80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4af255b61000000000000000000000000e905eacee9b020c8d024f25fcad60df0ed195064756e646566696e6564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        },
      ],
    },
    {
      contract: {
        address: '0xE905EaceE9B020C8D024f25FCAd60Df0ED195064',
      },
      methodInterface: {
        id: '0x44c028fe',
        name: 'execute',
      },
      decodedParameters: [
        {
          name: 'operation',
          type: 'uint256',
          value: '0',
        },
        {
          name: 'to',
          type: 'address',
          value: '0xe557CbF347EEF6575D04e412A052933F3bD84dF8',
        },
        {
          name: 'value',
          type: 'uint256',
          value: '0',
        },
        {
          name: 'data',
          type: 'bytes',
          value:
            '0xaf255b61000000000000000000000000e905eacee9b020c8d024f25fcad60df0ed195064756e646566696e65640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000',
        },
      ],
    },
    {
      contract: {
        address: '0xe557CbF347EEF6575D04e412A052933F3bD84dF8',
      },
      methodInterface: {
        id: '0xaf255b61',
        name: 'mint',
      },
      decodedParameters: [
        {
          name: 'to',
          type: 'address',
          value: '0xE905EaceE9B020C8D024f25FCAd60Df0ED195064',
        },
        {
          name: 'tokenId',
          type: 'bytes32',
          value: '0x756e646566696e65640000000000000000000000000000000000000000000000',
        },
        {
          name: 'force',
          type: 'bool',
          value: 'false',
        },
        {
          name: 'data',
          type: 'bytes',
          value: 'null',
        },
      ],
    },
  ];

  describe('Decode Input Parts', () => {
    beforeEach(async () => {
      await clearDB();
      await insertMethodInterface('0xaf255b61', '0xaf255b61', 'mint', 'function');
      await insertMethodParameter('0xaf255b61', 'to', 'address', 0, false);
      await insertMethodParameter('0xaf255b61', 'tokenId', 'bytes32', 1, false);
      await insertMethodParameter('0xaf255b61', 'force', 'bool', 2, false);
      await insertMethodParameter('0xaf255b61', 'data', 'bytes', 3, false);
      await insertContract('0x42d6fE6eb3Fc1E5585Ab958Fb77780327991781B', null);
      await insertContract('0xE905EaceE9B020C8D024f25FCAd60Df0ED195064', 'LSP0');
      await insertContract('0xe557CbF347EEF6575D04e412A052933F3bD84dF8', 'LSP8');
    });

    it('should return the right output', async () => {
      const res = await decodeInputParts(
        RAW_INPUT,
        web3.utils.toChecksumAddress('0x42d6fe6eb3fc1e5585ab958fb77780327991781b'),
        [],
      );

      EXPECTED_OUTPUT.forEach((fnCall, i) => {
        expect(fnCall.contract.address).to.equal(res[i].contract.address);
        expect(fnCall.methodInterface.id).to.equal(res[i].methodInterface.id);
        expect(fnCall.methodInterface.name).to.equal(res[i].methodInterface.name);

        fnCall.decodedParameters.forEach((param, j) => {
          expect(param.value).to.equal(res[i].decodedParameters[j].value);
          expect(param.type).to.equal(res[i].decodedParameters[j].type);
          expect(param.value).to.equal(res[i].decodedParameters[j].value);
        });
      });
    });

    it("should return unknown function if input can't be decoded", async () => {
      const res = await decodeInputParts(
        RAW_INPUT2,
        web3.utils.toChecksumAddress('0x42d6fe6eb3fc1e5585ab958fb77780327991781b'),
        [],
      );

      assert(res[2]);
      expect(res[2].methodInterface.name).to.equal('Unknown Function');
      expect(res[2].decodedParameters.length).to.equal(0);
    });
  });
};
